[{"C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\index.js":"1","C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\App.js":"2","C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\reportWebVitals.js":"3","C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\containers\\ChartPlotter\\ChartPlotter..js":"4","C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\data_handling_module\\handleData.js":"5","C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\components\\FixedBottomDiv\\FixedBottomDiv.js":"6","C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\components\\Header\\Header.js":"7","C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\components\\UI\\Button\\Button.js":"8","C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\components\\LineChart\\LineChart.js":"9","C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\components\\CodeMirror\\CodeMirror.js":"10"},{"size":589,"mtime":1612823883630,"results":"11","hashOfConfig":"12"},{"size":390,"mtime":1612822636131,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1612822636456,"results":"14","hashOfConfig":"12"},{"size":3451,"mtime":1612822636362,"results":"15","hashOfConfig":"12"},{"size":5422,"mtime":1612822636440,"results":"16","hashOfConfig":"12"},{"size":270,"mtime":1612822636331,"results":"17","hashOfConfig":"12"},{"size":273,"mtime":1612822636331,"results":"18","hashOfConfig":"12"},{"size":205,"mtime":1612822636346,"results":"19","hashOfConfig":"12"},{"size":1792,"mtime":1612822636331,"results":"20","hashOfConfig":"12"},{"size":1377,"mtime":1612822636331,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"tpvl2b",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\index.js",[],["44","45"],"C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\App.js",[],"C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\reportWebVitals.js",[],"C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\containers\\ChartPlotter\\ChartPlotter..js",[],"C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\data_handling_module\\handleData.js",["46","47","48"],"//Check if the data passed by is in the right JSON format\r\nconst isJson= (input)=>{\r\n    try {\r\n        let json = eval(\"[\" + input.split(\"\\n\") + \"]\")\r\n        return true\r\n    } catch (error) {\r\n        return false \r\n    }\r\n}\r\n\r\n/* Data should be returned in the following structure:\r\n\r\n    {\r\n        os + browser + min_response_time:0.1 \r\n    }\r\n\r\n*/\r\n\r\n\r\n//Function to create the structure above\r\nconst chartData= (input)=>{\r\n    let json = eval(\"[\" + input.split(\"\\n\") + \"]\");\r\n    const [start, stop] = dataInterval(json);\r\n    const span = intervalTimeSpan(json, start, stop);\r\n    const dataEvents = getDataEvents(json,start,stop,span);\r\n    const sortedDataEvents =  sortEvents(dataEvents);\r\n    const graphData = setGraphData(sortedDataEvents)\r\n    return graphData\r\n}\r\n\r\n//Function to find the interval between types Start and Stop\r\nconst dataInterval = (input)=>{\r\n    let startIndex = getStartIndex(input) ;\r\n    let stopIndex = getStopIndex(input, startIndex);\r\n    return [startIndex, stopIndex];\r\n}\r\n\r\n//Function to get the index of the first START\r\nconst getStartIndex = (input)=>{\r\n    let startIndex = null;\r\n    let n = 0;\r\n    while(n < input.length && startIndex === null){\r\n        if(input[n].type === \"start\") startIndex = n;\r\n        n++;\r\n    }\r\n    return startIndex;\r\n}\r\n\r\n//Function to get the index of the first STOP after the Start\r\nconst getStopIndex = (input, startIndex)=>{\r\n    let stopIndex = null;\r\n    let n = startIndex + 1;\r\n    while(n<=input.length && stopIndex === null){\r\n        if (input[n].type === \"stop\") stopIndex = n;\r\n        n++;\r\n    }\r\n    return stopIndex;\r\n}\r\n\r\n//Function to get the latest SPAN type\r\nconst intervalTimeSpan = (input, startIndex, stopIndex)=>{\r\n    let spanIndex = null;\r\n    let n = startIndex;\r\n    while( n < stopIndex ){\r\n        if ( input[n].type === \"span\") spanIndex = n;\r\n        n++;\r\n    }\r\n    return spanIndex;\r\n}\r\n\r\n//Function to get the DATA events inside the timestamp and between the start and stop intervals\r\nconst getDataEvents = (json, startIndex, stopIndex, span)=>{\r\n    let dataEventsArray = [];\r\n    const endTime = json[span].end;\r\n    const beginTime = json[span].begin;\r\n    let n = startIndex +1;\r\n    while( n < json.length && n < stopIndex){\r\n        if(json[n].type === \"data\" && isInsideInterval(json[n], beginTime, endTime)){\r\n            dataEventsArray.push(json[n])\r\n        }\r\n        n++;\r\n    }\r\n    console.log(dataEventsArray)\r\n    return dataEventsArray;\r\n}\r\n\r\n//Check if the DATA event is inside SPAN interval\r\nconst isInsideInterval = (obj, minTime, maxTime)=>{\r\n    if (obj.timestamp <= maxTime && obj.timestamp >= minTime){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n// Sort the DATA events\r\nconst sortEvents = (events)=>{\r\n    let dataEvents = Object.assign({},events)\r\n\r\n    //Quicksort algorithm to sort the data by timestamp\r\n    function quicksort(json, low, high){\r\n        if(low<high){\r\n            let pi = partition (json,low,high)\r\n            quicksort(json,low, pi-1)\r\n            quicksort(json,pi+1, high)\r\n        }\r\n    }\r\n\r\n    function partition(json,low,high){\r\n        let pivot = json[high]\r\n        let i = (low-1)\r\n        let [a,b,c,d] = [{},{},{},{}]\r\n        for ( let j = low; j <= high-1; j++){\r\n            if(json[j].timestamp < pivot.timestamp){\r\n                i++;\r\n                a = json[i];\r\n                c = json[j]\r\n                json[i] = c\r\n                json[j] = a\r\n            }\r\n        }\r\n        b = json[i+1]\r\n        d = json[high]\r\n        json[i+1] = d\r\n        json[high] = b\r\n        return(i+1)\r\n    }\r\n    quicksort(dataEvents,0, events.length-1)\r\n    let arraySortedEvents = Object.keys(dataEvents).map(key =>{return dataEvents[key]})\r\n    return arraySortedEvents;\r\n}\r\n\r\n/*\r\n    Function to set the data structure required by the \r\n    Recharts library to plot the line graph data\r\n    \r\n    Ex:\r\n        [\r\n            {\r\n                \"time\": 0,\r\n                \"linux chrome min response time\"\r\n            }\r\n        ]\r\n*/\r\nconst setGraphData = (events)=>{\r\n    let time = new Date(events[0].timestamp).getMinutes();\r\n    let graphData = [];\r\n    let dataSetPerTimestamp= {};\r\n    dataSetPerTimestamp[\"time\"] = time ;\r\n    let [key1, key2] = [\"\",\"\"];\r\n\r\n    function insertDataSet(event){\r\n        key1 = event.os + \" \" + event.browser + \" min response time\"\r\n        key2 = event.os + \" \" + event.browser + \" max response time\"\r\n        dataSetPerTimestamp[key1] = event.min_response_time\r\n        dataSetPerTimestamp[key2] = event.max_response_time\r\n    }\r\n\r\n    function pushToGraphData(){\r\n        graphData.push(dataSetPerTimestamp)\r\n        dataSetPerTimestamp={}\r\n    }\r\n\r\n    function setNewTimeStamp(event){\r\n        time = new Date(event.timestamp).getMinutes()\r\n        dataSetPerTimestamp[\"time\"] = time\r\n    }\r\n\r\n    function isSameTimestamp(event){\r\n        if( new Date(event.timestamp).getMinutes() === time )return true\r\n        return false\r\n    }\r\n\r\n    for(let n =0; n < events.length; n++){\r\n        if(n === events.length -1){\r\n            insertDataSet(events[n])\r\n            pushToGraphData()\r\n        }\r\n        else if( isSameTimestamp(events[n]) ){\r\n            insertDataSet(events[n])\r\n        }else{\r\n            pushToGraphData()\r\n            setNewTimeStamp(events[n])\r\n            insertDataSet(events[n])\r\n        }\r\n    }\r\n    return graphData;\r\n}\r\n\r\nexport { isJson, chartData };","C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\components\\FixedBottomDiv\\FixedBottomDiv.js",[],"C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\components\\Header\\Header.js",[],"C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\components\\UI\\Button\\Button.js",[],"C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\components\\LineChart\\LineChart.js",[],"C:\\Users\\caiov\\OneDrive\\Documentos\\GitHub\\intellie-challenge\\src\\components\\CodeMirror\\CodeMirror.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":4,"column":13,"nodeType":"55","messageId":"56","endLine":4,"endColumn":17},{"ruleId":"57","severity":1,"message":"58","line":4,"column":20,"nodeType":"59","messageId":"60","endLine":4,"endColumn":24},{"ruleId":"57","severity":1,"message":"58","line":22,"column":16,"nodeType":"59","messageId":"60","endLine":22,"endColumn":20},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'json' is assigned a value but never used.","Identifier","unusedVar","no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]